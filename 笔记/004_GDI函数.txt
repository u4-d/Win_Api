向视窗的显示区域写入字符串
TextOut(hdc,x,y,psText,iLength);
hdc窗口代号?
x,y显示的开始位置 x是水平位置，y是垂直位置
psText指向字符串的指针
iLength字符串的长度

取得窗口代号:
方法1
hdc = BeginPaint (hwnd, &ps) ;  
在此处调用填充窗口函数
也可以什么都不做(仅仅使先前无效区域变为有效)
EndPaint (hwnd, &ps) ; 

绘图结构体(调用者只使用前3个字段,后3个留给系统使用)
typedef struct tagPAINTSTRUCT 
{ 
HDC      hdc ; 
BOOL        fErase ; 
RECT        rcPaint ; 
BOOL     fRestore ; 
BOOL     fIncUpdate ; 
BYTE     rgbReserved[32] ; 
} PAINTSTRUCT ; 

WM_ERASEBKGND 擦除信息

使整个显示区域变为无效，并擦除背景
InvalidateRect (hwnd, NULL, TRUE) ;
不擦除背景
InvalidateRect (hwnd, NULL, FALSE) ;

方法2
hdc = GetDC (hwnd) ; 
在此处调用填充窗口函数
ReleaseDC (hwnd, hdc) ;

typedef struct tagTEXTMETRIC {
  LONG    tmHeight;         // 字形的高度
  LONG    tmAscent;         // 字形的升高（字体的上部分）
  LONG    tmDescent;        // 字形的降幅（字体的下部分）
  LONG    tmInternalLeading; // 字符内部的行间距
  LONG    tmExternalLeading; // 外部行间距
  LONG    tmWeight;         // 字体的粗细
  LONG    tmOverhang;       // 字符的突出部分
  LONG    tmDigitizedAspectX; // 数字化字体的宽度比例
  LONG    tmDigitizedAspectY; // 数字化字体的高度比例
  BYTE    tmFirstChar;      // 第一个字符的 ASCII 值
  BYTE    tmLastChar;       // 最后一个字符的 ASCII 值
  BYTE    tmDefaultChar;    // 默认字符的 ASCII 值
  BYTE    tmBreakChar;      // 换行符字符的 ASCII 值
  WORD    tmItalic;         // 字体是否为斜体
  WORD    tmUnderlined;     // 字体是否有下划线
  WORD    tmStruckOut;      // 字体是否有删除线
  WORD    tmPitchAndFamily; // 字体的音调和家族信息
  BYTE    tmCharSet;        // 字符集
} TEXTMETRIC;

GetTextMetrics函数
BOOL GetTextMetrics(
  HDC         hdc,
  LPTEXTMETRIC lptm
);
参数
hdc：设备上下文的句柄，表示一个绘图环境，通常是在调用绘制函数（如 BeginPaint 或 CreateCompatibleDC）时获得的。
lptm：指向 TEXTMETRIC 结构的指针，函数将把获取到的字体信息存储到这个结构中。
用于获取有关字体的度量信息。
该函数可以帮助开发者获取有关某种字体的高度、宽度和其他相关的文本属性，
这对于文本布局、绘制和排版等任务非常有用。



GetSystemMetrics 函数，它用于检索有关系统的各种信息和设置，
包括屏幕的分辨率、窗口的最大大小、任务栏的大小等等。

参数
nIndex：指定要检索的系统度量项的索引值。这个参数是一个整数，
代表不同的系统信息项。每个不同的索引值对应不同的系统度量。
常见的索引值可以是与屏幕分辨率、任务栏、窗口大小等相关的常量。

常用的 nIndex 值
SM_CXSCREEN (0)：屏幕的宽度，以像素为单位。
SM_CYSCREEN (1)：屏幕的高度，以像素为单位。
SM_CXVSCROLL (2)：垂直滚动条的宽度。
SM_CYHSCROLL (3)：水平滚动条的高度。
SM_CYCAPTION (4)：标题栏的高度。
SM_CXEDGE (45)：边框宽度。
SM_CYEDGE (46)：边框高度。
SM_CXICON (11)：图标的宽度。
SM_CYICON (12)：图标的高度。
SM_CYMINTRACK (34)：窗口的最小高度。
SM_CXMINTRACK (33)：窗口的最小宽度。
SM_CYFULLSCREEN (16)：全屏模式下的屏幕高度。
SM_CXFULLSCREEN (15)：全屏模式下的屏幕宽度。

其他用途
窗口布局调整：通过获取屏幕大小和其他布局信息，开发者可以在程序启动时自动调整窗口的大小。
任务栏和滚动条处理：有时需要知道任务栏的大小或滚动条的大小，以便避免窗口和内容被遮挡或与屏幕边缘重叠。

GetClientRect函数
BOOL GetClientRect(
  HWND   hWnd,    // 窗口的句柄
  LPRECT lpRect   // 指向 RECT 结构体的指针，用于接收客户区的坐标信息
);
参数说明：
hWnd：窗口的句柄（HWND）。这是你想获取客户区域的窗口的标识符。
lpRect：指向 RECT 结构体的指针。RECT 结构体用于存储客户区域的左上角和右下角的坐标。
RECT 结构体：
RECT 结构体用于存储一个矩形的坐标，定义如下：

cpp
复制代码
typedef struct tagRECT {
    LONG left;    // 矩形左边的x坐标
    LONG top;     // 矩形上边的y坐标
    LONG right;   // 矩形右边的x坐标
    LONG bottom;  // 矩形下边的y坐标
} RECT;
left 和 top 分别表示矩形左上角的 x 和 y 坐标。
right 和 bottom 分别表示矩形右下角的 x 和 y 坐标。
返回值：
如果函数成功，返回值为 非零。
如果函数失败，返回值为 零。可以通过调用 GetLastError 来获取详细的错误信息。

HFONT CreateFont(
  int     cHeight,          // 字体的高度
  int     cWidth,           // 字体的宽度
  int     cEscapement,      // 字形的旋转角度
  int     cOrientation,     // 字形的方向角度
  int     cWeight,          // 字体的粗细
  DWORD   cItalic,          // 是否为斜体
  DWORD   cUnderline,       // 是否有下划线
  DWORD   cStrikeOut,       // 是否有删除线
  DWORD   cCharSet,         // 字符集
  DWORD   cOutPrecision,    // 输出精度
  DWORD   cClipPrecision,   // 剪辑精度
  DWORD   cQuality,         // 输出质量
  DWORD   cPitchAndFamily,  // 音高和字形类别
  LPCTSTR lpszFacename      // 字体名称
);
参数说明：
cHeight：字体的高度，通常是像素单位。
cWidth：字体的宽度，通常是像素单位。如果设置为 0，表示使用默认宽度。
cEscapement：字体的旋转角度（以 1/10 度为单位）。一般情况下，该值为 0 表示不旋转。
cOrientation：字体的方向角度（以 1/10 度为单位）。通常该值与 cEscapement 一致。
cWeight：字体的粗细，常用的值有 FW_NORMAL（正常），FW_BOLD（加粗）等。
cItalic：指定字体是否为斜体。设置为 TRUE 表示斜体，FALSE 表示非斜体。
cUnderline：指定字体是否带有下划线。设置为 TRUE 表示下划线，FALSE 表示没有。
cStrikeOut：指定字体是否带有删除线。设置为 TRUE 表示删除线，FALSE 表示没有。
cCharSet：字符集。常用的值有 DEFAULT_CHARSET、ANSI_CHARSET、SYMBOL_CHARSET 等。
cOutPrecision：输出精度。常用的值有 OUT_DEFAULT_PRECIS、OUT_TT_PRECIS 等。
cClipPrecision：剪辑精度。常用的值有 CLIP_DEFAULT_PRECIS 等。
cQuality：输出质量。常用的值有 DEFAULT_QUALITY、DRAFT_QUALITY、PROOF_QUALITY 等。
cPitchAndFamily：音高和字体的类别，常见的值有 DEFAULT_PITCH、FF_DONTCARE、FF_ROMAN 等。
lpszFacename：字体名称，表示要使用的字体。例如 "Arial"、"Times New Roman"。
返回值：
返回一个 HFONT 类型的句柄，表示创建的字体对象。如果失败，返回 NULL。

